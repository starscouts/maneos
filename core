#!/usr/bin/node
const fs = require('fs');
const child_process = require("child_process");

process.stdout.write("\033[1;37m");

let firstStart = false;

if (process.argv[2]) firstStart = true;

process.on('uncaughtException', (e) => {
    console.error(e);
})

process.on('SIGUSR1', () => {
    console.clear();
    console.log("Power off requested.");
});

process.on('SIGUSR2', () => {
    console.clear();
    console.log("Reboot requested.");
});

require('hide-terminal-cursor')();
console.clear();
process.stdin.setRawMode(true);

let enableF8 = !firstStart;
let currentStep = 0;
let totalSteps = 0;

function progress(percentage) {
    if (firstStart) {
        process.stdout.cursorTo(0, process.stdout.rows - 1);
        process.stdout.write(" ".repeat(process.stdout.columns));
    } else {
        let filled = Math.round(process.stdout.columns * percentage);
        let empty = process.stdout.columns - filled;

        process.stdout.cursorTo(0, process.stdout.rows - 4);
        process.stdout.write("█".repeat(filled) + "▐".repeat(empty));
    }
}

global.currentStepPercentage = (percentage) => {
    progress((((currentStep / totalSteps) + (1 / totalSteps) * percentage) * 0.975) + 0.025);
}

function center(text) {
    let length = Math.round(process.stdout.columns / 2 - text.length / 2);
    return " ".repeat(length) + text + " ".repeat(process.stdout.columns - (" ".repeat(length) + text).length);
}

process.stdin.on('data', (key) => {
    let code = key.toString("hex");

    if (code === "03") { // Ctrl+C
        process.stdout.write("\033[0m");
        process.stdin.setRawMode(false);
        console.clear();
        require('show-terminal-cursor')();
        process.exit(0);
    } else if (code === "1b5b31397e" && enableF8) { // F8
        console.clear();
        console.log("Advanced startup options have not been implemented yet. Press Ctrl+Alt+Del to restart.");
    }
})

setInterval(() => {});

setTimeout(() => {
    progress(0.025);
}, 500);

setTimeout(async () => {
    enableF8 = false;
    process.stdout.cursorTo(0, process.stdout.rows - 2);
    process.stdout.clearLine(null);

    let hooks = fs.readdirSync("./startup");
    let total = hooks.length;
    let index = 0;

    totalSteps = total;

    for (let hook of hooks) {
        try {
            await require("./startup/" + hook)();
        } catch (e) {
            console.clear();
            console.log("Running " + hook + " failed with the following error:\n");
            console.error(e);
        }

        index++;
        currentStep = index;
        progress(((index / total) * 0.975) + 0.025);

        if (firstStart) process.exit();
    }

    setTimeout(() => {
        console.clear();
        require('show-terminal-cursor')();
        process.stdin.setRawMode(false);

        try {
            require('child_process').spawnSync("node", [ "main.js" ], { cwd: "/maneos/shell", stdio: "inherit" });
            require('child_process').execFileSync("chvt", [ "1" ]);
        } catch (e) {}
    }, 200);
}, 2000);

if (!firstStart) {
    process.stdout.cursorTo(0, process.stdout.rows - 2);
    process.stdout.write("For troubleshooting and advanced startup options for maneOS, press F8.");

    progress(0);

    process.stdout.cursorTo(0, process.stdout.rows - 5);
    process.stdout.write(center("Starting maneOS..."));
}